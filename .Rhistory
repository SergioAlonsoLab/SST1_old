stop("'RowSideColors' must be a character vector or matrix of length nrow(x)")
lmat <- cbind(lmat[, 1] + 1, c(rep(NA, nrow(lmat) - 1),
1), lmat[, 2] + 1)
lwid <- c(lwid[1L], 0.2 * round(ncol(RowSideColors)/2 +
0.1), lwid[2L])
}
lmat <- lmat + 1
lmat[is.na(lmat)] <- 0
lmat[1, 1] <- 1
dev.hold()
on.exit(dev.flush())
op <- par(no.readonly = TRUE)
on.exit(par(op), add = TRUE)
if (balanceColor) {
if (abs(max(x, na.rm = T)) >= abs(min(x, na.rm = T))) {
cut.off <- round(quantile(1:length(col), probs = 1 -
(abs(max(x, na.rm = T)) + abs(min(x, na.rm = T)))/(2 *
abs(max(x, na.rm = T)))))
col <- col[cut.off:length(col)]
}
else {
cut.off <- round(quantile(1:length(col), probs = (abs(max(x,
na.rm = T)) + abs(min(x, na.rm = T)))/(2 * abs(min(x,
na.rm = T)))))
col <- col[1:cut.off]
}
}
print(lmat)
graphics::layout(lmat, widths = lwid, heights = lhei, respect = TRUE)
if (!missing(legendfun)) {
par(mar = c(0, 0, 0, 0))
par(xpd = NA)
legendfun()
}
else {
par(mar = c(5, 1, 1, 0))
dummy.x <- seq(min(x, na.rm = TRUE), max(x, na.rm = TRUE),
length = length(col))
dummy.z <- matrix(dummy.x, ncol = 1)
image(x = dummy.x, y = 1, z = dummy.z, yaxt = "n", col = col,
cex.axis = cexCol, xlab = "")
}
if (!missing(RowSideColors)) {
par(mar = c(margins[1L], 0, 0, 0.5))
if (revC) {
rsc = RowSideColors[rev(rowInd), , drop = F]
}
else {
rsc = RowSideColors[rowInd, , drop = F]
}
rsc.colors = matrix()
rsc.names = names(table(rsc))
rsc.i = 1
for (rsc.name in rsc.names) {
rsc.colors[rsc.i] = rsc.name
rsc[rsc == rsc.name] = rsc.i
rsc.i = rsc.i + 1
}
rsc = matrix(as.numeric(rsc), nrow = dim(rsc)[1])
image(t(rsc), col = as.vector(rsc.colors), axes = FALSE)
if (missing(RowSideLabs)) {
if (ncol(RowSideColors) == 1 & colnames(RowSideColors)[1] ==
"") {
RowSideLabs <- ""
}
else {
RowSideLabs <- colnames(RowSideColors)
}
}
if (dim(rsc)[2] == 1) {
axis(1, 0, RowSideLabs, las = 2, tick = FALSE)
}
else {
axis(1, 0:(dim(rsc)[2] - 1)/(dim(rsc)[2] - 1), RowSideLabs,
las = 2, tick = FALSE)
}
}
if (!missing(ColSideCut)) {
ColSideCutResult <- cut(ddc, ColSideCut)$lower
cutTable <- NULL
if (verbose) {
cat(paste0("The samples could be cut into ", length(ColSideCutResult),
" parts with height ", ColSideCut))
cat("\n")
ColSideCutResultSubIndList <- list()
for (i in 1:length(ColSideCutResult)) {
ColSideCutResultSubInd <- order.dendrogram(ColSideCutResult[[i]])
ColSideCutResultSubIndList[[i]] <- ColSideCutResultSubInd
}
for (i in 1:ncol(ColSideAnn)) {
if (is.factor(ColSideAnn[, i])) {
cutTable[[i]] <- sapply(ColSideCutResultSubIndList,
function(x) table(ColSideAnn[x, i]))
colnames(cutTable[[i]]) <- paste0("Cluster ",
1:length(ColSideCutResult))
names(cutTable)[i] <- colnames(ColSideAnn)[i]
pvalue <- chisq.test(cutTable[[i]])$p.value
cat(paste0("Differential distribution for ",
colnames(ColSideAnn)[i], ", p value by chi-squared test: ",
round(pvalue, 3), "\n"))
cutTable[[i]] <- rbind(cutTable[[i]], round(cutTable[[i]][1,
]/colSums(cutTable[[i]]), 2))
row.names(cutTable[[i]])[nrow(cutTable[[i]])] <- paste0(row.names(cutTable[[i]])[1],
"_Percent")
cutTable[[i]] <- cbind(cutTable[[i]], pValue = c(pvalue,
rep(NA, nrow(cutTable[[i]]) - 1)))
}
else {
cutTable[[i]] <- sapply(split(ColSideAnn[unlist(ColSideCutResultSubIndList),
i], rep(1:length(ColSideCutResultSubIndList),
sapply(ColSideCutResultSubIndList, length))),
function(x) summary(na.omit(x)))
colnames(cutTable[[i]]) <- paste0("Cluster ",
1:length(ColSideCutResult))
names(cutTable)[i] <- colnames(ColSideAnn)[i]
temp <- aov(ColSideAnn[unlist(ColSideCutResultSubIndList),
i] ~ as.factor(rep(1:length(ColSideCutResultSubIndList),
sapply(ColSideCutResultSubIndList, length))))
pvalue <- summary(temp)[[1]]$"Pr(>F)"[1]
cat(paste0("Differential distribution for ",
colnames(ColSideAnn)[i], ", p value by ANOVA: ",
round(pvalue, 3), "\n"))
cutTable[[i]] <- cbind(cutTable[[i]], pValue = c(pvalue,
rep(NA, 5)))
}
}
}
ColSideCutResultCol <- rainbow(length(ColSideCutResult),
alpha = 0.2)
ColNumber <- (ncol(x) - 1)
}
if (!missing(ColSideFun)) {
par(mar = c(0.5, 0, 0, margins[2L]))
ColSideAnn <- ColSideAnn[colInd, , drop = F]
ColAnnHeight <- ColSideFun(ColSideAnn)
if (!exists("ColAnnHeight")) {
ColAnnHeight <- par("usr")[3:4]
}
if (!missing(ColSideCut)) {
rect(c(0 - 1/ColNumber/2, (0 - 1/ColNumber/2) + 1/ColNumber *
cumsum(sapply(ColSideCutResult, function(x) length(unlist(x))))[-length(ColSideCutResult)]),
ColAnnHeight[1], c((0 - 1/ColNumber/2) + 1/ColNumber *
cumsum(sapply(ColSideCutResult, function(x) length(unlist(x))))),
ColAnnHeight[2], col = ColSideCutResultCol)
}
}
else if (!missing(ColSideColors)) {
par(mar = c(0.5, 0, 0, margins[2L]))
csc = ColSideColors[colInd, , drop = F]
csc.colors = matrix()
csc.names = names(table(csc))
csc.i = 1
for (csc.name in csc.names) {
csc.colors[csc.i] = csc.name
csc[csc == csc.name] = csc.i
csc.i = csc.i + 1
}
csc = matrix(as.numeric(csc), nrow = dim(csc)[1])
image(csc, col = as.vector(csc.colors), axes = FALSE)
if (missing(ColSideLabs)) {
if (ncol(ColSideColors) == 1 & colnames(ColSideColors)[1] ==
"") {
ColSideLabs <- ""
}
else {
ColSideLabs <- colnames(ColSideColors)
}
}
if (dim(csc)[2] == 1) {
axis(4, 0, ColSideLabs, las = 2, tick = FALSE)
}
else {
axis(4, 0:(dim(csc)[2] - 1)/(dim(csc)[2] - 1), ColSideLabs,
las = 2, tick = FALSE)
}
}
par(mar = c(margins[1L], 0, 0, margins[2L]))
if (!symm || scale != "none")
x <- t(x)
if (revC) {
iy <- nr:1
if (doRdend)
ddr <- rev(ddr)
x <- x[, iy]
}
else iy <- 1L:nr
image(1L:nc, 1L:nr, x, xlim = 0.5 + c(0, nc), ylim = 0.5 +
c(0, nr), axes = FALSE, xlab = "", ylab = "", col = col,
useRaster = useRaster, ...)
if (!missing(colorCell)) {
colorCell[, 1] <- match(colorCell[, 1], rowInd)
colorCell[, 2] <- match(colorCell[, 2], colInd)
rect(colorCell[, 2] - 0.5, colorCell[, 1] - 0.5, colorCell[,
2] + 0.5, colorCell[, 1] + 0.5, col = as.character(colorCell[,
3]), border = NA)
}
if (!missing(highlightCell)) {
if (ncol(highlightCell) == 3) {
highlightCell$lwd <- 1
}
highlightCell[, 1] <- match(highlightCell[, 1], rowInd)
highlightCell[, 2] <- match(highlightCell[, 2], colInd)
rect(highlightCell[, 2] - 0.5, highlightCell[, 1] - 0.5,
highlightCell[, 2] + 0.5, highlightCell[, 1] + 0.5,
border = as.character(highlightCell[, 3]), lwd = as.integer(highlightCell[,
4]))
}
if (!missing(ColSideColors) & ColAxisColors != 0) {
mtext(1, at = 1L:nc, text = labCol, las = lasCol, line = 0.5,
cex = cexCol, col = ColSideColors[colInd, ColAxisColors])
}
else {
axis(1, 1L:nc, labels = labCol, las = lasCol, line = -0.5,
tick = 0, cex.axis = cexCol)
}
if (!is.null(xlab))
mtext(xlab, side = 1, line = margins[1L] - 1.25)
if (!missing(RowSideColors) & RowAxisColors != 0) {
mtext(4, at = iy, text = labRow, las = lasRow, line = 0.5,
cex = cexRow, col = RowSideColors[rowInd, RowAxisColors])
}
else {
axis(4, iy, labels = labRow, las = lasRow, line = -0.5,
tick = 0, cex.axis = cexRow)
}
if (!is.null(ylab))
mtext(ylab, side = 4, line = margins[2L] - 1.25)
if (!missing(add.expr))
eval(substitute(add.expr))
par(mar = c(margins[1L], 0, 0, 0))
if (doRdend & showRowDendro)
plot(ddr, horiz = TRUE, axes = FALSE, yaxs = "i", leaflab = "none")
else frame()
par(mar = c(0, 0, if (!is.null(main)) 1 else 0, margins[2L]))
if (doCdend & showColDendro) {
plot(ddc, axes = FALSE, xaxs = "i", leaflab = "none")
if (!missing(ColSideCut)) {
rect(c(0.5, 0.5 + cumsum(sapply(ColSideCutResult,
function(x) length(unlist(x))))[-length(ColSideCutResult)]),
0, cumsum(sapply(ColSideCutResult, function(x) length(unlist(x)))) +
0.5, ColSideCut, col = ColSideCutResultCol)
}
}
else if (!is.null(main))
frame()
if (!is.null(main)) {
par(xpd = NA)
title(main, cex.main = 1.5 * op[["cex.main"]])
}
invisible(list(rowInd = rowInd, colInd = colInd, Rowv = if (keep.dendro &&
doRdend) ddr, Colv = if (keep.dendro && doCdend) ddc,
cutTable = if (!missing(ColSideAnn) && !missing(ColSideCut)) cutTable,
DistMatrixC = if (returnDistMatrix) distMatrixC, DistMatrixR = if (returnDistMatrix) distMatrixR))
}
heatmap4(x2)
mouseHeatMap(mouseData$LogLiver,clusterColors = brewer.pal(5,"Set1")[1:3])
plotScale(scale(scale(t(mouseData$LogSerum))))
plotScale <- function(values,col=defaultPalette) {
max0 <- max(abs(values),na.rm=T) %>% ceiling
scs <- matrix(0:1000)
image(scs,col=col,axes=F)
axis(1,at=seq(0,1,l=5),labels = seq(-max0,max0,l=5))
abline(v=0.5,lty=2)
box()
title(xlab="Z-score")
}
plotScale(scale(scale(t(mouseData$LogSerum))))
plotScale <- function(values,col=defaultPalette) {
max0 <- max(abs(values),na.rm=T) %>% ceiling
scs <- matrix(0:1000)
image(scs,col=col,axes=F)
axis(1,at=seq(0,1,l=5),labels = seq(-max0,max0,l=5))
abline(v=0.5,lty=2)
box()
title(xlab="Standard score",type=3)
}
plotScale(scale(scale(t(mouseData$LogSerum))))
title(xlab="Standard score",font=3)
plotScale <- function(values,col=defaultPalette) {
max0 <- max(abs(values),na.rm=T) %>% ceiling
scs <- matrix(0:1000)
image(scs,col=col,axes=F)
axis(1,at=seq(0,1,l=5),labels = seq(-max0,max0,l=5))
abline(v=0.5,lty=2)
box()
title(xlab="Standard score",font=3)
}
plotScale(scale(scale(t(mouseData$LogSerum))))
plotScale(scale(scale(t(mouseData$LogLiver))))
plotScale <- function(values,col=defaultPalette) {
max0 <- max(abs(values),na.rm=T) %>% ceiling
scs <- matrix(0:1000)
image(scs,col=col,axes=F)
axis(1,at=seq(0,1,l=5),labels = seq(-max0,max0,l=5))
abline(v=0.5,lty=2)
box()
title("Standard score")
}
png("output/mouseHeatMapLiver.png",900,1200,pointsize = 18)
mouseHeatMap(mouseData$LogLiver,clusterColors = brewer.pal(5,"Set1")[1:3])
dev.off()
plotScale(scale(scale(t(mouseData$LogLiver))))
plotScale <- function(values,col=defaultPalette) {
max0 <- max(abs(values),na.rm=T) %>% ceiling
scs <- matrix(0:1000)
image(scs,col=col,axes=F)
axis(1,at=seq(0,1,l=5),labels = seq(-max0,max0,l=5))
abline(v=0.5,lty=2)
box()
title("Z-score")
}
png("output/mouseHeatMapLiver.png",900,1200,pointsize = 18)
mouseHeatMap(mouseData$LogLiver,clusterColors = brewer.pal(5,"Set1")[1:3])
dev.off()
plotScale(scale(scale(t(mouseData$LogLiver))))
plotScale <- function(values,col=defaultPalette) {
par(mar=c(1,1,1,1))
max0 <- max(abs(values),na.rm=T) %>% ceiling
scs <- matrix(0:1000)
image(scs,col=col,axes=F)
axis(1,at=seq(0,1,l=5),labels = seq(-max0,max0,l=5))
abline(v=0.5,lty=2)
box()
title("Z-score")
}
png("output/mouseHeatMapLiver.png",900,1200,pointsize = 18)
mouseHeatMap(mouseData$LogLiver,clusterColors = brewer.pal(5,"Set1")[1:3])
dev.off()
plotScale(scale(scale(t(mouseData$LogLiver))))
plotScale <- function(values,col=defaultPalette) {
par(mar=c(4,1,2,1))
max0 <- max(abs(values),na.rm=T) %>% ceiling
scs <- matrix(0:1000)
image(scs,col=col,axes=F)
axis(1,at=seq(0,1,l=5),labels = seq(-max0,max0,l=5))
abline(v=0.5,lty=2)
box()
title("Z-score")
}
plotScale(scale(scale(t(mouseData$LogLiver))))
png("output/mouseHeatMapSerum.png",900,1200,pointsize = 18)
mouseHeatMap(mouseData$LogSerum,clusterColors = brewer.pal(5,"Set1")[1:4])
dev.off()
plotScale(scale(scale(t(mouseData$LogSerum))))
heatmap3(mouseData$LogLiver)
heatmap3(mouseData$LogLiver)
heatmap3(mouseData$LogLiver)
heatmap3(mouseData$LogLiver)
heatmap3(mouseData$LogLiver) -> foo
foo
mouseHeatMap(mouseData$Liver)
mouseHeatMap(mouseData$Liver,clusterColors = 1:5)
mouseHeatMap(mouseData$LogLiver,clusterColors = 1:5)
mouseHeatMap(mouseData$LogSerum,clusterColors = 1:5)
heatmap3(mouseData$LogSerum) -> foo
heatmap3(mouseData$LogSerum,scale = "none") -> foo
heatmap3(mouseData$LogSerum,scale = "row") -> foo
heatmap3(mouseData$LogSerum) -> foo
heatmap3(mouseData$LogSerum %>% t %>% scale %>% t,scale = "none") -> foo
mouseData$LogSerum %>% t %>% scale %>% t -> foo
foo
rowMeans(foo)
rowMeans(foo,na.rm=T)
image(foo)
plot(foo[1,])
plot(foo[2,])
plot(foo[3,])
plot(mouseData$LogSerum[3,],foo[3,])
plot(mouseData$LogSerum[3,] %>% as.numeric,foo[3,])
plot(mouseData$LogSerum[2,] %>% as.numeric,foo[2,])
plot(mouseData$LogSerum[3,] %>% as.numeric,foo[3,])
plot(mouseData$LogSerum[5,] %>% as.numeric,foo[5,])
plotScale((scale(t(mouseData$LogLiver))))
plotScale((scale(t(mouseData$LogSerum))))
plotScale(scale(x2))
plotScale(scale(t(x2)))
install.packages("plotKML")
library(plotKML)
readGPX("~/Downloads/strava.activities.3404102396.Evening-Walk.gpx") -> foo
foo
foo2 <- foo$tracks[[1]]$`Evening Walk | Walk | Strava`
plot(foo2[,1:2])
foo2[,1:2]
plot(foo2[,1:2])
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
x
foo2[x,] <- NULL
foo2 <- foo2[-x,]
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
which(foo2$lon > 2.29)
x <- which(foo2$lon > 2.29)
foo2 <- foo2[-x,]
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
y <- locator()
y
y <- locator()
y
z <- sqrt((foo2$lon - y$x)^2 + (foo2$lat - y$y)^2)
plot(z)
z
foo2$lon - y$x
foo2$lon
foo2
foo2 <- foo$tracks[[1]]$`Evening Walk | Walk | Strava`
plot(foo2[,1:2],type="o")
x <- identify(foo2[,1:2])
foo2 <- foo2[-x,]
foo2 <- foo$tracks[[1]]$`Evening Walk | Walk | Strava`
plot(foo2[,1:2],type="o")
y <- locator()
z <- sqrt((foo2$lon - y$x)^2 + (foo2$lat - y$y)^2)
z
plot(z)
plot(sort(z))
plot(sort(z))
foo2[z < 0.01,]
foo2[which(z < 0.01),]
foo2[-which(z < 0.01),]
foo2[-which(z < 0.01),] -> foo2
y <- locator()
z <- sqrt((foo2$lon - y$x)^2 + (foo2$lat - y$y)^2)
plot(foo2[,1:2],type="o")
y <- locator()
z <- sqrt((foo2$lon - y$x)^2 + (foo2$lat - y$y)^2)
plot(sort(z))
foo2[-which(z < 0.015),] -> foo2
plot(foo2[,1:2],type="o")
y <- locator()
y
foo2$lon > y$x[1] & foo2$lon < y$x[2] & foo2$lat > y$y[1] & foo2$lat < y$y[2]
which(foo2$lon > y$x[1] & foo2$lon < y$x[2] & foo2$lat > y$y[1] & foo2$lat < y$y[2])
y <- locator()
which(foo2$lon > y$x[1] & foo2$lon < y$x[2] & foo2$lat > y$y[1] & foo2$lat < y$y[2])
z <- which(foo2$lon > y$x[1] & foo2$lon < y$x[2] & foo2$lat > y$y[1] & foo2$lat < y$y[2])
foo2[-z,] -> foo2
plot(foo2[,1:2],type="o")
y <- locator()
z <- which(foo2$lon > y$x[1] & foo2$lon < y$x[2] & foo2$lat > y$y[1] & foo2$lat < y$y[2])
foo2[-z,] -> foo2
plot(foo2[,1:2],type="o")
i = 40
d = 50
s = 60
vs = 70
g = 80
e = 90
g+e+vs+g+g+s
g+e+vs+g+g+s
460/6
mean(a,i)
mean(a,i,d,s)
mean(c(a,i,d,s))
columns <- seq(40,90,10)
columns
mean(columns[c(4,3,5,5,6,5,5,6)])
columns[c(4,3,5,5,6,5,5,6)]
mean(columns[c(6,5,5,6,6)])
mean(columns[c(5,6,4,5,5,3)])
mean(columns[c(4,3,5,5,6,5,5,6)])
mean(c(86,78.75,76.67))
setwd("~/Documents/WORK/SST1")
library(gdata)
cellCycle <- read.xls("data/CellCycleBEA.xlsx")
cellCycle
cellCycle <- read.xls("data/CellCycleBEA.xlsx")
cellCycle
cellCycle[,c("G1","S","G2","belowG1","overG2")]
library(magrittr)
cellCycle[,c("G1","S","G2","belowG1","overG2")]
cellCycle[,c("G1","S","G2","belowG1","overG2")] %>% rowSum
cellCycle[,c("G1","S","G2","belowG1","overG2")] %>% rowSums
cellCycle[,c("G1","S","G2")] %>% rowSums
x <- cellCycle[,c("G1","S","G2","belowG1","overG2")] %>% rowSums
x
cellCycle[,c("G1","S","G2","belowG1","overG2")] -> x
barplot(t(x))
cellCycle[,c("belowG1","G1","S","G2","overG2")] -> x
barplot(t(x))
barplot(t(x),horiz=T)
x
rownames(x) <- cellCycle$Sample
barplot(t(x),horiz=T)
barplot(t(x),horiz=T,las=2)
